#!/usr/bin/env ruby

# Copyright 2011 ZTT, FH Worms. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright notice, this list
#       of conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY ZTT, FH WORMS ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ZTT, FH WORMS OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are those of the
# authors and should not be interpreted as representing official policies, either expressed
# or implied, of ZTT, FH Worms.


require 'RMagick'
include Magick
require File.dirname(__FILE__) + '/rollit_common'
require 'fileutils'
require "#{SCRIPT_DIR}/RollitTemplateController"

def add_static_templates_to_output_dir
  FileUtils.cp_r(STATIC_OUTPUT_TEMPLATE_DIR, OUTPUT_DIR)
end

def copy_summary_images_to_output_dir
  section_entities.each do |section_id, section_name|
    unit_entities_in_section(section_id).each do |unit_id, unit_name|
      summary_images_in_unit(section_id, unit_id).each do |input_image_name|
        output_image_name = "#{section_id}_#{unit_id}_" + input_image_name.split('.')[0...-1].join + '.png'
        input_path = "#{unit_path(section_id, unit_id, unit_name)}/summary_images/#{input_image_name}"
        fullsize_image = Magick::Image::read(input_path).first
        fullsize_image.write("#{IMAGE_OUTPUT_DIR}/#{output_image_name}")
        thumbnail_image = Magick::Image::read(input_path).first
        thumbnail_image.resize_to_fit!(160, 90)
        background = Magick::Image.new(160, 90) {self.background_color = "transparent"}
        thumbnail_image = background.composite(thumbnail_image, Magick::CenterGravity, Magick::OverCompositeOp)
        thumbnail_image.write("#{THUMBNAIL_IMAGE_OUTPUT_DIR}/#{output_image_name}")
      end
    end
  end
end

#  one video file in mov format is copied to output dir.
#+ if more are present, one is currently chosen at random, but no warning is given!
def copy_videos_to_output_dir
  section_entities.each do |section_id, section_name|
    unit_entities_in_section(section_id).each do |unit_id, unit_name|
      unit_video_output_dir = "#{VIDEO_OUTPUT_DIR}/#{section_id}_#{unit_id}/"
      FileUtils.mkdir_p unit_video_output_dir
      video_in_unit(section_id, unit_id).each do |video_name|
        output_path =  unit_video_output_dir + video_name
        input_path = "#{unit_path(section_id, unit_id, unit_name)}/video/#{video_name}"
        FileUtils.cp(input_path, output_path)
      end
    end
  end
end

#  files in the download folder can be linked in markdown files using [NameOrDescription](DIRECTORY/_/downloads/#_#/FILENAME)
#+ where DIRECTORY may be GdI, Statistik etc. and # needs to be section id and unit id
def copy_downloads_to_output_dir
  section_entities.each do |section_id, section_name|
    unit_entities_in_section(section_id).each do |unit_id, unit_name|
        unit_downloads_output_dir = "#{DOWNLOADS_OUTPUT_DIR}/#{section_id}_#{unit_id}/"
        FileUtils.mkdir_p unit_downloads_output_dir
      downloads_in_unit(section_id, unit_id).each do |download_name|
        output_path =  unit_downloads_output_dir + download_name
        input_path = "#{unit_path(section_id, unit_id, unit_name)}/downloads/#{download_name}"
        FileUtils.cp(input_path, output_path)
      end
    end
  end
end

FileUtils.remove_dir(OUTPUT_DIR, true)
add_static_templates_to_output_dir
rtc = RollitTemplateController.new
copy_summary_images_to_output_dir
copy_videos_to_output_dir
copy_downloads_to_output_dir
File.open("#{OUTPUT_DIR}/index.html", "w") do |f|
  f.write(rtc.render template:'index')
end





